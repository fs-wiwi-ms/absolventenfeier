= if @user.role == :admin do
  div.columns
    div.column(align="right")
      a.button.is-primary(href="#{event_path(@conn, :new)}")
        span.icon.has-text-info
          i.fas.fa-plus
        span = gettext("Create event")

= if !@events or Enum.empty?(@events) do
  div.subtitle
    span = gettext("Keine zukünftigen Absolventenfeiern gefunden. Auf unseren Kanälen (")
    a(href="https://fachschaft-wiwi.ms") = gettext("Homepage")
    span ,
    a(href="https://www.facebook.com/fachschaftwiwi.ms/") = gettext("Facebook")
    span ,
    a(href="https://www.instagram.com/fachschaft.wiwi.ms/") = gettext("Instagram")
    span = gettext(") wirst du über neue Events informiert.")
- else
  = for event <- @events do
    article.message(class="#{if event.published do "is-info" else "is-link" end}")
      div.message-header
        p.title.is-5(style="margin-bottom:0") = "#{gettext("Graduation Ceremony")} #{if event.term.type == :winter_term do gettext("WT") else gettext("ST") end} #{event.term.year} - #{Timex.format!(event.date_of_event, "{0D}.{0M}.{YYYY}")}"
        = if @user.role == :admin do
          div.field.is-grouped
            p.control
              button.button.is-primary
                a.icon.has-text-info(href="#{event_path(@conn, :edit, event.id)}" data-tooltip="#{gettext("Edit event")}")
                  i.fas.fa-pen
            p.control
              button.button.is-primary
                = if event.published do
                  a.icon.has-text-info(href="#{event_path(@conn, :make_private, event.id)}" data-tooltip="#{gettext("Make private")}")
                    i.fas.fa-ban
                - else
                  a.icon.has-text-info(href="#{event_path(@conn, :publish, event.id)}" data-tooltip="#{gettext("Publish event")}")
                    i.fa.fa-globe-europe
            = if !event.published do
              p.control
                button.button.is-primary
                  a.icon.has-text-info(href="#{event_path(@conn, :archive, event.id)}" data-tooltip="#{gettext("Archive event")}")
                    i.fa.fa-archive
            p.control
              button.button.is-primary
                a.icon.has-text-info(href="#{event_registration_path(@conn, :index, event.id)}" data-tooltip="#{gettext("Show registrations")}")
                  i.fas.fa-table
            / = form_for @conn, event_path(@conn, :delete, event.id), fn _f ->
            /   input type="hidden" name="_method" value="delete"
            /   p.control
            /     button.button.is-danger
            /       span.icon.has-text-white(data-method="post" data-tooltip="#{gettext("Delete event")}" href="#")
            /         i.fas.fa-trash



      div.message-body
        = render "_steps.html", assigns |> Map.put(:event, event) |> Map.put(:user, @user)

        = case get_event_state(event) do
          - :registration_open ->
            p.title.is-6 = gettext("Registration phase")
            div.columns
              div.column
                = if user_registerd_for_event(event, @user) do
                  div.tags.has-addons
                    span.tag.is-light
                      span.icon
                          i.fas.fa-check
                    span.tag.is-success = gettext("Already registered")
                - else
                  div.tags.has-addons
                    span.tag.is-light
                      span.icon
                        i.fas.fa-exclamation
                    span.tag.is-danger = gettext("Not registered yet")



              div.column(align="right")
              = case user_registerd_for_event(event, @user) do
                - %Registration{} = registration ->
                  = form_for @conn, registration_path(@conn, :delete, registration.id), [method: :delete], fn _form ->
                    button.button.is-danger.is-outlined(type="submit")
                      span.icon
                        i.fas.fa-times
                      span = gettext("Deregister")

                - nil ->
                  a.button.is-primary.is-outlined(href="#{event_registration_path(@conn, :new, event.id)}")
                    span.icon
                      i.fas.fa-file-signature
                    span = gettext("Register now")
          - :ticketing_open ->
            p.title.is-6 = gettext("Ticketing phase")
            div.columns
              div.column
                = case user_ordered_for_event(event, @user) do
                  - %Order{} = order ->
                    div.field.has-addons
                      = case get_payment_status_for_order(order) do
                        - n when n in [:open] ->
                          p.control
                            button.button.is-light.has-tooltip-multiline(data-tooltip="#{gettext("We are waiting for the confirmation of your payment from our payment provider.")}")
                              span.icon
                                i.fas.fa-hourglass-half
                          p.control
                            button.button.is-warning
                              span = gettext("Pending")
                        - n when n in [:paid] ->
                          p.control
                            button.button.is-light
                              span.icon
                                i.fas.fa-check
                          p.control
                            button.button.is-success
                              = case order.payment.method do
                                - "paypal" ->
                                  span.icon(data-tooltip="#{gettext("Paid with PayPal.")}")
                                    i.fab.fa-cc-paypal

                                - n when n in ["creditcard", "debitcard"] ->
                                  span.icon(data-tooltip="#{gettext("Paid with credit card.")}")
                                    i.fas.fa-credit-card

                                - n when n in ["banktransfer", "manual_bank_transfer"] ->
                                  span.icon(data-tooltip="#{gettext("Paid with bank transfer.")}")
                                    i.fas.fa-money-check

                                - "sofort" ->
                                  span.icon(data-tooltip="#{gettext("Paid with Sofort Banking.")}")
                                    i.fab.fa-stripe-s
                              span = gettext("Paid")

                            - nil ->
                        - n when n in [:error] ->
                          p.control
                            button.button.is-light
                              span.icon
                                i.fas.fa-exclamation
                          p.control
                            button.button.is-error
                              span = gettext("Error")
                        - :none ->
                          p.control
                            button.button.is-light
                              span.icon
                                i.fas.fa-check
                          p.control
                            button.button.is-success
                              span = gettext("Order successfull")
                  - nil ->
                    div.field.has-addons
                      button.button.is-light
                        span.icon
                          i.fas.fa-exclamation
                        span.is-danger = gettext("Not ordered yet")

              div.column(align="right")
              = case user_registerd_for_event(event, @user) do
                - %Registration{} = registration ->
                  = case user_ordered_for_event(event, @user) do
                    - %Order{} = order ->
                      = case get_payment_status_for_order(order) do
                          - :none ->
                            = form_for @conn, order_path(@conn, :delete, order.id), [method: :delete], fn _form ->
                              button.button.is-danger.is-outlined(type="submit")
                                span.icon
                                  i.fas.fa-times
                                span = gettext("Delete order")
                            a.button.is-primary.is-outlined(href="#{order_path(@conn, :edit, order.id)}")
                              span.icon
                                i.fas.fa-pen
                              span = gettext("Change order")
                            a.button.is-primary.is-outlined(href="#{order_payment_path(@conn, :new, order.id)}")
                              span.icon
                                i.fas.fa-money-bill
                              span = gettext("Pay now!")
                          - n when n in [:open, :paid] ->
                            - payment = Payment.get_payment_by_order_id(order.id)
                            a.button.is-primary.is-outlined(href="#{payment_path(@conn, :show, payment.id)}")
                              span.icon
                                i.fas.fa-money-bill
                              span = gettext("Show payment!")
                          - n when n in [:error] ->
                    - nil ->
                      a.button.is-primary.is-outlined(href="#{event_order_path(@conn, :new, event.id)}")
                        span.icon
                          i.fas.fa-ticket-alt
                        span = gettext("Order now")
                - nil ->
          - _ ->
